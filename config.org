#+TITLE: My Org Init File
#+AUTHOR: Emmanuel Parreno  (EMMAN)
#+DESCRIPTION: An init file for GNU Emacs

* My first emacs init file
I am a vim (neovim) user. I got hooked by the idea of everything being centralized, and with a lispy language at that (something I've never tried before).
This is my attempt to satisfy my curiosity with Gnu Emacs (more specifically, something made from scratch).

* Why the switch?
I will have to develop in Java this coming semester (S.Y. 2024-2025). Something vim is infamously bad at. I'm trying to make an editor that can handle Java code debugging.
I was partially successful at setting up Java in neovim, but it only had Gradle support and autocompletion. It didn't have the debugger or more advanced features like template generation in FXML (or others).
I read that GNU Emacs is good at that (without the heaviness of traditional IDEs(intellij, netbeans, etc.)).

** I wanted to test it out so, yeah.... I'm suffering here..

* Packages

** Install Straight.el(package manager)
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name
	  "straight/repos/straight.el/bootstrap.el"
	  (or (bound-and-true-p straight-base-dir)
	      user-emacs-directory)))
	(bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (use-package straight
    :straight t)
#+end_src

** Install evil (Vim bindings)
#+begin_src emacs-lisp
  (straight-use-package 'evil)
  (setq evil-want-integration 1)
  (setq evil-want-C-u-scroll 1)
  (setq evil-want-Y-yank-to-eol t)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (setq evil-want-keybinding nil)
  (evil-mode 1)
#+end_src

** CORFU (completion)
#+begin_src emacs-lisp
  (straight-use-package 'corfu)
(use-package corfu
:straight t
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  (corfu-scroll-margin 999)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (global-corfu-mode))
#+end_src

** Install evil-collection
#+begin_src emacs-lisp
  (straight-use-package 'evil-collection)
  (evil-collection-init)
#+end_src

** Install python LSP (pyright)
#+begin_src emacs-lisp
    (straight-use-package 'lsp-pyright)
  (use-package lsp-pyright
    :straight t
    :ensure t
    :hook (python-mode . (lambda ()
			    (require 'lsp-pyright)
			    (lsp))))  ; or lsp-deferred
#+end_src

** Install company-mode
#+begin_src emacs-lisp
  ;; (straight-use-package 'company-mode)
  ;; (add-hook 'after-init-hook 'global-company-mode)
#+end_src


* Additional settings (customizations)
#+begin_src emacs-lisp
  ;; for font and line numbers
  (setq display-line-numbers-type 'relative)
  (global-display-line-numbers-mode)

  (set-face-attribute 'default nil :height 120)
#+end_src

** Theming
#+begin_src emacs-lisp
    (straight-use-package 'catppuccin-theme)
	(load-theme 'catppuccin :no-confirm)
    (setq catppuccin-flavor 'macchiato) ;; or 'latte, 'macchiato, or 'mocha
    (catppuccin-reload)
#+end_src
